#!/bin/bash





# set some colors
CNT="[\e[1;36mNOTE\e[0m]"
COK="[\e[1;32mOK\e[0m]"
CER="[\e[1;31mERROR\e[0m]"
CAT="[\e[1;37mATTENTION\e[0m]"
CWR="[\e[1;35mWARNING\e[0m]"
CAC="[\e[1;33mACTION\e[0m]"
INSTLOG="install.log"

#clear the screen
clear

# downloads
cd ~/Downloads

# online deb files to retrieve
#wget -O zoom.deb "https://zoom.us/client/latest/zoom_amd64.deb"
wget -O chrome.deb "https://dl.google.com/linux/direct/google-chrome-stable_current_amd64.deb"
wget -O discord.deb "https://discordapp.com/api/download?platform=linux&format=deb"
wget -O vscode.deb 'https://code.visualstudio.com/sha/download?build=stable&os=linux-deb-x64'
#wget -O iriun.deb 'https://iriun.gitlab.io/iriunwebcam-2.7.deb'
#wget -O github_desktop.deb "https://github.com/shiftkey/desktop/releases/download/release-2.6.3-linux1/GitHubDesktop-linux-2.6.3-linux1.deb"

# xppentablet
# https://www.xp-pen.com/download-55.html
wget -O xp.deb "xp-pen.com/download/file/id/1949/pid/55/ext/deb.html"


# github desktop
sudo apt install wget apt-transport-https gnupg2 software-properties-common

wget https://github.com/shiftkey/desktop/releases/download/release-3.1.7-linux1/GitHubDesktop-linux-3.1.7-linux1.deb

wget -O edge.deb "https://go.microsoft.com/fwlink?linkid=2149051&brand=M102"

# install all the deb files retrieved from the internet
sudo apt install -f ./*.deb

# lf
sudo apt install -y golang && env CGO_ENABLED=0 go install -ldflags="-s -w" github.com/gokcehan/lf@latest

# flatpak install:
sudo apt install flatpak
sudo add-apt-repository ppa:flatpak/stable
sudo apt update
sudo apt install flatpak

# add flathub repo
flatpak remote-add --if-not-exists flathub https://dl.flathub.org/repo/flathub.flatpakrepo

# flathub packages:
flatpak install flathub com.brave.Browser --system -y
flatpak install flathub com.github.xournalpp.xournalpp --system -y
flatpak install flathub com.obsproject.Studio --system -y
flatpak install flathub com.getpostman.Postman --system -y

# more tools
sudo apt install -y ncdu exa bat cmake kitty htop rpi-imager cheese tree neofetch cmatrix fish xsel

# iphone transfer Files
sudo apt install ifuse

# 7zip
sudo apt install p7zip-full

# for pop os built in video player
sudo apt install -y gstreamer1.0-libav ffmpeg

# postgresql
sudo apt install -y postgresql

# rustup
curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh

# starship
curl -sS https://starship.rs/install.sh | sh

# oh-my-fish
# additional tools set up not in the arch repo:
curl https://raw.githubusercontent.com/oh-my-fish/oh-my-fish/master/bin/install | fish
omf install bang-bang
omf install https://github.com/Alaz-Oz/fish-insulter

# neovim version manager
cargo install --git https://github.com/MordechaiHadad/bob.git

# neovim build from source
# build prereqs
sudo apt-get install ninja-build gettext cmake unzip curl build-essential -y

# build neovim from source
git clone https://github.com/neovim/neovim /tmp/neovim/
cd /tmp/neovim/
make CMAKE_BUILD_TYPE=RelWithDebInfo
git checkout stable
sudo make install


# cptv from source (previewer for lf file manager)
sudo apt install -y libssl-dev libmagic-dev file openssl imagemagick coreutils

git clone https://github.com/NikitaIvanovV/ctpv /tmp/cptv && cd /tmp/ctpv && make && sudo make install


# dotnet sdk and runtime
sudo apt-get update && \
  sudo apt-get install -y dotnet-sdk-8.0

sudo apt-get update && \
  sudo apt-get install -y aspnetcore-runtime-8.0

#wget https://dot.net/v1/dotnet-install.sh -O dotnet-install.sh
#chmod +x ./dotnet-install.sh
#./dotnet-install.sh --version latest
#./dotnet-install.sh --version latest --runtime aspnetcore
#./dotnet-install.sh --channel 8.0


echo -e "To swap caps lock and esc, install gnome tweaks from pop shop, go to keyboard & mouse and find it in additional options"


# nodejs and python
curl -fsSL https://deb.nodesource.com/setup_16.x | sudo -E bash - && \
sudo apt install -y nodejs python3-pip

# to copy terminal command output to clipboard on xorg:
# echo "[your_linux_command]" | xsel -b

# bleeding edge trash-cli useful for tools such as lf
sudo pip install git+https://github.com/andreafrancia/trash-cli


### Copy Config Files ###
read -n1 -rep $'[\e[1;33mACTION\e[0m] - Would you like to copy config files? (y,n) ' CFG
if [[ $CFG == "Y" || $CFG == "y" ]]; then
	echo -e "$CNT - Copying config files..."
	for DIR in kitty tmux fish lf Wallpapers; do
		DIRPATH=~/.config/$DIR
		if [ -d "$DIRPATH" ]; then
			echo -e "$CAT - Config for $DIR located, backing up."
			mv $DIRPATH $DIRPATH-back &>>$INSTLOG
			echo -e "$COK - Backed up $DIR to $DIRPATH-back."
		fi
		echo -e "$CNT - Copying $DIR config to $DIRPATH."
		cp -R $DIR ~/.config/ &>>$INSTLOG
	done

	read -n1 -rep $'[\e[1;33mACTION\e[0m] - Would you like to copy files to home directory? (y,n) ' CFG
	if [[ $CFG == "Y" || $CFG == "y" ]]; then
		echo -e "$CNT - Copying config files..."
		for DIR in .bashrc; do
			DIRPATH=~/$DIR
			if [ -d "$DIRPATH" ]; then
				echo -e "$CAT - Config for $DIR located, backing up."
				mv $DIRPATH $DIRPATH-back &>>$INSTLOG
				echo -e "$COK - Backed up $DIR to $DIRPATH-back."
			fi
			echo -e "$CNT - Copying $DIR config to $DIRPATH."
			cp -R $DIR ~ &>>$INSTLOG
		done

		echo -e "copying cron_contents to the crontab..."
		crontab ~/Documents/GitHub/Configs/Pop_OS/dotfiles/extras/cron/cron_contents.txt

    ### Install the starship shell ###
read -n1 -rep $'[\e[1;33mACTION\e[0m] - Would you like to activate the starship shell? (y,n) ' STAR
if [[ $STAR == "Y" || $STAR == "y" ]]; then
	# install the starship shell
	echo -e "$CNT - Hansen Crusher, Engage!"
	echo -e "$CNT - Updating .bashrc..."
	#echo -e '\neval "$(starship init bash)"' >>~/.bashrc
	echo -e "$CNT - copying starship config file to ~/.confg ..."
	cp ./extras/starship.toml ~/.config/
fi

    read -n1 -rep $'[\e[1;33mACTION\e[0m] - Would you like to install extras tools to set up the remaining configs (y,n) ' USER_RESPONSE
if [[ $USER_RESPONSE == "Y" || $USER_RESPONSE == "y" ]]; then
	echo -e "you said yes"
	./extras/scripts/./master
else
	echo -e "you said no"
fi

read -n1 -rep $'[\e[1;33mACTION\e[0m] - Would you like to replace the default emulator with a custom one? (y,n) ' USER_RESPONSE
if [[ $USER_RESPONSE == "Y" || $USER_RESPONSE == "y" ]]; then
	echo -e "you said yes"
  sudo update-alternatives --config x-terminal-emulator
else
	echo -e "you said no"
fi

### Script is done ###
echo -e "$CNT - Script had completed!"
